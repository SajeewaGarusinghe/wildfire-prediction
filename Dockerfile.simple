# Ultra-minimal Dockerfile for immediate deployment
FROM python:3.9-slim

WORKDIR /app

# Install only essential system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy only essential requirements
COPY requirements-docker.txt ./requirements.txt

# Upgrade pip and install Python dependencies
RUN pip install --no-cache-dir --upgrade pip
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY app_updated.py ./app.py
COPY config.py .
COPY src/ ./src/
COPY templates/ ./templates/
COPY run_simple_pipeline.py .

# Create necessary directories
RUN mkdir -p data models logs static

# Set environment variables
ENV PYTHONPATH=/app
ENV FLASK_APP=app.py
ENV FLASK_ENV=production
ENV PORT=5050

# Expose port
EXPOSE 5050

# Simple health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:5050/api/health || exit 1

# Create startup script
RUN echo '#!/bin/bash\n\
echo "🚀 Starting Wildfire Prediction System..."\n\
echo "📊 Checking for existing models..."\n\
if [ ! -f "/app/models/random_forest.pkl" ]; then\n\
    echo "🔧 No models found, creating training data and training models..."\n\
    python3 run_simple_pipeline.py\n\
    echo "✅ Training completed!"\n\
else\n\
    echo "✅ Models already exist, skipping training"\n\
fi\n\
echo "🌐 Starting web application..."\n\
python3 app.py' > /app/startup.sh

RUN chmod +x /app/startup.sh

# Run the startup script
CMD ["/bin/bash", "/app/startup.sh"]



